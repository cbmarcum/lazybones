/* build with:
* ./gradlew publish (this pushed to nexus staging repo also)
* nexus-plugin docs say to use:
* ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
* or:
* ./gradlew publishToSonatype closeSonatypeStagingRepository
* or to publish locally
* ./gradlew publishToMavenLocal
*
* to update this wrapper version
* $ gradle wrapper --gradle-version 6.7 --distribution-type all
*/

plugins {
    id 'maven-publish'
    id 'java-gradle-plugin'
    id 'groovy'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

// ignored by publish but used with jar task alone
archivesBaseName = "skeletor-gradle"
group = "net.codebuilders"
// version = "${skeletorGradlePluginVersion}"
version = '1.3.1'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT") // used to not pgp sign snapshots
    // isReleaseVersion = false  // to force not signing
}

repositories {
    mavenCentral()
}

dependencies {
    // gradleApi() drags in the Groovy bundled with Gradle, so always a good idea
    // to specify localGroovy() too
    implementation localGroovy(), gradleApi()

    testImplementation("org.spockframework:spock-core:0.7-groovy-2.0") {
        exclude module: "groovy-all"
    }
    testImplementation "cglib:cglib-nodep:2.2.2"
}

java {
    withJavadocJar()
    withSourcesJar()
}

/* pluginMaven is a special undocumented name used by the gradle plugin so we
  * don't create two publications by using gradle plugin and maven publish.
  * https://github.com/gradle/gradle/issues/10384 */
publishing {
    publications {
        pluginMaven(MavenPublication) {
            artifactId = 'skeletor-gradle'
            // from components.java

            // versionMapping placeholder

            pom {
                name = 'Skeletor Gradle Plugin'
                packaging = 'jar'
                description = 'Skeletor - a Gradle plugin for Lazybones templates'
                url = 'http://codebuilders.net'
                inceptionYear = '2016'

                scm {
                    url = 'https://github.com/cbmarcum/mybusiness'
                    developerConnection = 'https://github.com/cbmarcum/mybusiness'
                    connection = 'https://github.com/cbmarcum/mybusiness'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    // Original Lazybones developers
                    developer {
                        name = 'Peter Ledbrook'
                    }
                    developer {
                        name = 'Kyle Boon'
                    }
                    developer {
                        name = 'Tommy Barker'
                    }
                    // Skeletor fork
                    developer {
                        name = 'Carl Marcum'
                        email = 'carl.marcum@codebuilders.net'
                        url = 'http://codebuilders.net'
                        organization = 'Code Builders, LLC'
                        organizationUrl = 'http://codebuilders.net'

                    }
                }
            }
        }
    }

    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

// credentials in .gradle
signing {
    // only pgp sign if not a snapshot and we are uploading to maven repo
    required { isReleaseVersion }
    // sign publishing.publications.pluginMaven
    sign publishing.publications
    // sign configurations.archives
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
            // nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            // snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}

gradlePlugin {
    plugins {
        autoUpdate {
            id = 'net.codebuilders.lazybones-templates'
            implementationClass = 'uk.co.cacoethes.gradle.LazybonesTemplatesPlugin'
        }
    }
}
